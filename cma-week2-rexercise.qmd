---
title: "cma-week2-rexercise"
format: html
---

# ok Task 1: Import your data
```{r}
## Load the necessary libraries ################################################

library(readr) # to import tabular data (e.g. csv)
library(dplyr) # to manipulate (tabular) data
library(ggplot2) # to visualize data
library(sf) # to handle spatial vector data
library(terra) # To handle raster data
library(lubridate) # To handle dates and times
library(tmap)

## Import the downloaded csv ##################################################

wildschwein_BE <- read_delim("data/wildschwein_BE_2056.csv", ",") # adjust path

# to convert it to a spatial object
wildschwein_BE <- st_as_sf(wildschwein_BE, coords = c("E", "N"), crs = 2056, remove = FALSE) # setting remove = FALSE preserves the original (E/N) columns, which come in handy later on
```

# Task 2: Getting an overview 
```{r}
# Calculate the time difference between subsequent rows as described in the demo
wildschwein_BE <- wildschwein_BE |> # Takes wildschwein_BE 
    group_by(TierID) |> # ...group it by TierID
    mutate(timelag_sec = as.integer(difftime(lead(DatetimeUTC), DatetimeUTC, units = "secs")))

# How many individuals were tracked?
ggplot(wildschwein_BE, aes(DatetimeUTC, TierID)) +
  geom_point()
# 3 individuals (002A, 016A, 018A)
# this plot would also be possible using TierName from the dataset
# you can see that for example 002A was tracked the longest of all three individuals 

# or you can use another way to check for individuals in your data 
wildschwein_BE$TierID |> unique() # through TierID
wildschwein_BE$TierName |> unique() # or through TierName 

# For how long were the individuals tracked? Are there gaps?
ggplot(wildschwein_BE, aes(timelag_sec/60)) +
  geom_histogram(binwidth = 1) +
  lims(x = c(0, 5000/60)) +
  scale_y_log10()
# the individuales were tracked between around 5 to 75 min. Most werde tracked around 15 min with outliers above and under these 15 min. 


# Were all individuals tracked concurrently or sequentially?
ggplot(wildschwein_BE, aes(DatetimeUTC, timelag_sec, col = TierID)) +
  geom_point()
# the individuals were tracked concurrently, as the sampling points in this plot overlap. 

# What is the temporal sampling interval between the locations?
# too much data, filter it 
wildschwein_BE |>
  filter(DatetimeUTC < "2014-08-24") |>
  ggplot(aes(DatetimeUTC, timelag_sec, col = TierID)) +
  geom_point()
```

# ok Task 3: Deriving movement parameters I: Speed 
```{r}
E1 <- 2570409
E2 <- 2570402 
N1 <- 1204752
N2 <- 1204863

# calculate euclidean distance 
# distance between the 1. and 2. location it 111metres 
sqrt((E1 - E2)^2 + (N1 - N2)^2)

# to calculate distance between locations (spalte E - lead(E), spalte N - lead(N))
wildschwein_BE <- wildschwein_BE |>
  group_by(TierID) |>
  mutate(steplength_m = sqrt((E - lead(E))^2 + (N - lead(N))^2))

# Now calculate the animalsâ€™ speed between consecutive locations based on steplength and the timelag (from the last task). What speed unit do you get? --> m/s
wildschwein_BE <- wildschwein_BE |>
  mutate(speed_ms = steplength_m/timelag_sec)

hist(log10(wildschwein_BE$speed_ms), 100)

widschwein
```

# Task 4: Cross-scale movement analysis 
```{r}
## Import the downloaded csv ##################################################

caro <- read_delim("data/caro60.csv")

# to convert it to a spatial object
caro <- st_as_sf(caro, coords = c("E", "N"), crs = 2056, remove = FALSE) # setting remove = FALSE preserves the original (E/N) columns, which come in handy later on

# manually reduce the granularity of the sampling interval 
seq_3 <- seq(from = 1, to = 200, by = 3)
seq_6 <- seq(from = 1, to = 200, by = 6)
seq_9 <- seq(from = 1, to = 200, by = 9)

caro_3 <- dplyr::slice(caro, seq_3)
caro_6 <- dplyr::slice(caro, seq_6)
caro_9 <- dplyr::slice(caro, seq_9)

nrow(caro)
## [1] 200
nrow(caro_3)
## [1] 67
nrow(caro_6)
## [1] 34
nrow(caro_9)
## [1] 23

# Now calculate timelag, steplength and speed for these data sets, just as you did in the last task
caro <- caro |> 
    group_by(TierID) |> 
    mutate(timelag_sec = as.integer(difftime(lead(DatetimeUTC), DatetimeUTC, units = "secs")),
           steplength_m = sqrt((E - lead(E))^2 + (N - lead(N))^2),
           speed_ms = steplength_m/timelag_sec)

caro_3 <- caro_3 |> 
    group_by(TierID) |> 
    mutate(timelag_sec = as.integer(difftime(lead(DatetimeUTC), DatetimeUTC, units = "secs")),
           steplength_m = sqrt((E - lead(E))^2 + (N - lead(N))^2),
           speed_ms = steplength_m/timelag_sec)

caro_6 <- caro_6 |> 
    group_by(TierID) |> 
    mutate(timelag_sec = as.integer(difftime(lead(DatetimeUTC), DatetimeUTC, units = "secs")),
           steplength_m = sqrt((E - lead(E))^2 + (N - lead(N))^2),
           speed_ms = steplength_m/timelag_sec)

caro_9 <- caro_9 |> 
    group_by(TierID) |> 
    mutate(timelag_sec = as.integer(difftime(lead(DatetimeUTC), DatetimeUTC, units = "secs")),
           steplength_m = sqrt((E - lead(E))^2 + (N - lead(N))^2),
           speed_ms = steplength_m/timelag_sec)

# comparing original with 3, 6 or 9 minutes resamples data 
# Interpret the line plot, what do the different lines for the different temporal granularities tell you?
caro_join <- st_join(caro, caro_3, by = E)

ggplot(caro, aes(E, N)) +
  theme_light() +
  geom_line() 

# Comparing derived speed at different sampling intervalls 
ggplot(caro_join, aes(DatetimeUTC.x, speed_ms.x)) +
  geom_line()
```

# Task 6 and 7: Add your movement data to your respitory and explore your morvement data
```{r}
# Import your data as a data frame and convert it to an sf object, using the correct CRS information
## Import the downloaded csv ##################################################

posmo <- read_delim("data/posmo_2023-01-01T00_00_00+01_00-2023-04-28T23_59_59+02_00.csv", ",") 

# to convert it to a spatial object
posmo <- st_as_sf(posmo, coords = c("lon_x", "lat_y"), crs = 4326, remove = FALSE) # setting remove = FALSE preserves the original (E/N) columns, which come in handy later on

# Convert your data to CH1903+ LV95
st_transform(posmo, crs = 2056)

# Make a map of your data using ggplot2 or tmap.
# with tmap
tmap_mode("view")

tm_shape(posmo) +
  tm_bubbles(col = posmo$transport_mode)

# with ggplot
ggplot(posmo, aes(lon_x, lat_y, col = transport_mode)) +
  geom_line()
```


