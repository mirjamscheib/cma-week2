---
title: "cma-week2-rexercise"
format: html
---

# Task 1: Import your data
```{r}
# Load the necessary libraries 
library(readr) # to import tabular data (e.g. csv)
library(dplyr) # to manipulate (tabular) data
library(ggplot2) # to visualize data
library(sf) # to handle spatial vector data
library(terra) # To handle raster data
library(lubridate) # To handle dates and times
library(tmap) # to make maps/ visualization 

# Import the downloaded csv 
wildschwein_BE <- read_delim("data/wildschwein_BE_2056.csv", ",")

# to convert it to a spatial object
# setting remove = FALSE preserves the original (E/N) columns, which come in handy later on
wildschwein_BE <- st_as_sf(wildschwein_BE, coords = c("E", "N"), crs = 2056, remove = FALSE) 
```

# Task 2: Getting an overview 
Calculate the time difference between subsequent rows as described in the demo. You can calculate the time difference using the function difftime() in combination with lead().

1. the function difftime() has an option units. Set this to secs to get the time difference in seconds
2. use as.integer() to turn the output returned by difftime() into an integer.
3. store the output in a new column (e.g. timelag)

Now inspect your data in more detail. Try to answer the following questions:

1. How many individuals were tracked?
2. For how long were the individual tracked? Are there gaps?
3. Were all individuals tracked concurrently or sequentially?
4. What is the temporal sampling interval between the locations?
```{r}
# Calculate the time difference between subsequent rows as described in the demo
wildschwein_BE <- wildschwein_BE |> # Take wildschwein_BE 
    group_by(TierID) |> # group it by TierID to avoid time difference calculations between different individuals 
    mutate(timelag_sec = as.integer(difftime(lead(DatetimeUTC), DatetimeUTC, units = "secs"))) # calculate time difference between subsequent rows in seconds 

# 1. How many individuals were tracked?
ggplot(wildschwein_BE, aes(DatetimeUTC, TierID)) +
  geom_point()
# 3 individuals (002A, 016A, 018A)
# this plot would also be possible using TierName from the dataset
# you can see that for example 002A was tracked the longest of all three individuals 

# or you can use another way to check for individuals in your data 
wildschwein_BE$TierID |> unique() # through TierID
wildschwein_BE$TierName |> unique() # or through TierName 


# 2. For how long were the individuals tracked? Are there gaps?
# AND 3. Were all individuals tracked concurrently or sequentially?
ggplot(wildschwein_BE, aes(DatetimeUTC, timelag_sec, col = TierID)) +
  geom_point()
# Answer 2.: According to the plot all individuals together were tracked from around october 2014 until july 2015. 
# Answer 3: the individuals were tracked concurrently, as the sampling points in this plot overlap. But there are also times, were only one individual was tracked (look at next plot)

# too much data, filter it 
wildschwein_BE |>
  filter(DatetimeUTC < "2014-08-24") |>
  ggplot(aes(DatetimeUTC, timelag_sec, col = TierID)) +
  geom_point()

# What is the temporal sampling interval between the locations?
ggplot(wildschwein_BE, aes(timelag_sec/60)) +
  geom_histogram(binwidth = 1) +
  lims(x = c(0, 5000/60)) +
  scale_y_log10()
# the sampling intervals were between around 5 to 75 min. Most intervalls lie around 15 min with outliers above and under these 15 min. 
```

# Task 3: Deriving movement parameters I: Speed 
In this task we will derive some additional movement parameters from our trajectories. So far our trajectories only consist of a list of time-stamped spatial locations. So let’s calculate the animal’s steplength based on the Euclidean distance between subsequent locations.

Now calculate the animals’ speed between consecutive locations based on steplength and the timelag (from the last task). What speed unit do you get?
```{r}
# to calculate euclidean distance between locations (column E - lead(E), column N - lead(N))
wildschwein_BE <- wildschwein_BE |>
  group_by(TierID) |>
  mutate(steplength_m = sqrt((E - lead(E))^2 + (N - lead(N))^2))

# Now calculate the animals’ speed between consecutive locations based on steplength and the timelag (from the last task). What speed unit do you get? --> m/s
wildschwein_BE <- wildschwein_BE |>
  mutate(speed_ms = steplength_m/timelag_sec)

hist(log10(wildschwein_BE$speed_ms), 100)
```

# Task 4: Cross-scale movement analysis
Laube and Purves (2011) analyse animal movement across different scales (see below). In their paper, the authors suggest reducing the granularity of the data by subsetting the data to every nth element. We will do the same on a dataset that includes 200 locations of a single wild boar with a constant sampling interval of 60 seconds.

Download this dataset here: caro60.csv. Import it just like you imported the other wild boar data and save it to a new variable named caro (note that the locations are stored in EPSG 2056).

Now manually reduce the granularity of our sampling interval by selecting every 3rd, 6th and 9th position and save the output to caro_3, caro_6,caro_9 accordingly.

Now calculate timelag, steplength and speed for these data sets, just as you did in the last task. To finish the task, compare the speeds visually in a line plot and also visualize the trajectories in a map (see examples below). Interpret the line plot, what do the different lines for the different temporal granularities tell you?
```{r}
# Import the downloaded csv 
caro <- read_delim("data/caro60.csv")

# to convert it to a spatial object, like in the .csv above
caro <- st_as_sf(caro, coords = c("E", "N"), crs = 2056, remove = FALSE) 

# manually reduce the granularity of the sampling interval 
# 1. I create sequences in the required granularities 
seq_3 <- seq(from = 1, to = 200, by = 3)
seq_6 <- seq(from = 1, to = 200, by = 6)
seq_9 <- seq(from = 1, to = 200, by = 9)

# 2. I slice the original data with the 3 granularities, which takes away all subsequent rows in between 3, 6 or 9 rows. 
caro_3 <- dplyr::slice(caro, seq_3)
caro_6 <- dplyr::slice(caro, seq_6)
caro_9 <- dplyr::slice(caro, seq_9)

# check if the process to reduce granularity worked
nrow(caro)
## [1] 200
nrow(caro_3)
## [1] 67
nrow(caro_6)
## [1] 34
nrow(caro_9)
## [1] 23

# Now calculate timelag, steplength and speed for these data sets (without reduced granularity, with 3, 6, 9), just as you did in the last task
caro <- caro |> 
    group_by(TierID) |> 
    mutate(timelag_sec = as.integer(difftime(lead(DatetimeUTC), DatetimeUTC, units = "secs")),
           steplength_m = sqrt((E - lead(E))^2 + (N - lead(N))^2),
           speed_ms = steplength_m/timelag_sec)

caro_3 <- caro_3 |> 
    group_by(TierID) |> 
    mutate(timelag_sec = as.integer(difftime(lead(DatetimeUTC), DatetimeUTC, units = "secs")),
           steplength_m = sqrt((E - lead(E))^2 + (N - lead(N))^2),
           speed_ms = steplength_m/timelag_sec)

caro_6 <- caro_6 |> 
    group_by(TierID) |> 
    mutate(timelag_sec = as.integer(difftime(lead(DatetimeUTC), DatetimeUTC, units = "secs")),
           steplength_m = sqrt((E - lead(E))^2 + (N - lead(N))^2),
           speed_ms = steplength_m/timelag_sec)

caro_9 <- caro_9 |> 
    group_by(TierID) |> 
    mutate(timelag_sec = as.integer(difftime(lead(DatetimeUTC), DatetimeUTC, units = "secs")),
           steplength_m = sqrt((E - lead(E))^2 + (N - lead(N))^2),
           speed_ms = steplength_m/timelag_sec)


# comparing original with 3, 6 or 9 minutes resamples data 
# Interpret the line plot, what do the different lines for the different temporal granularities tell you?
#caro_join <- st_join(caro, caro_3, by = E)

# Compare original with 3 min. 
ggplot() +
  geom_path(data = caro, aes(E, N, color = "caro")) +
  geom_path(data = caro_3, aes(E, N, color = "caro_3")) +
   theme_minimal() +
   scale_color_manual(name = "Tracetory",
                     values = c("caro" = "violet", "caro_3" = "lightblue"), 
                     labels = c("1 minute", "3 minutes")) +
  labs(title = "Comparing original- with 3 minutes-resampled data")
 

# Compare original with 6 min. 
ggplot() +
  geom_path(data = caro, aes(E, N, color = "caro")) +
  geom_path(data = caro_6, aes(E, N, color = "caro_6")) +
   theme_minimal() +
   scale_color_manual(name = "Tracetory",
                     values = c("caro" = "violet", "caro_6" = "lightblue"), 
                     labels = c("1 minute", "6 minutes")) +
  labs(title = "Comparing original- with 6 minutes-resampled data")

# Compare original with 9 min. 
ggplot() +
  geom_path(data = caro, aes(E, N, color = "caro")) +
  geom_path(data = caro_9, aes(E, N, color = "caro_9")) +
   theme_minimal() +
   scale_color_manual(name = "Tracetory",
                     values = c("caro" = "violet", "caro_9" = "lightblue"), 
                     labels = c("1 minute", "9 minutes")) +
  labs(title = "Comparing original- with 9 minutes-resampled data")

# Comparing derived speed at different sampling intervalls 
ggplot() +
  geom_line(data = caro, aes(DatetimeUTC, speed_ms, color = "caro")) +
  geom_line(data = caro_3, aes(DatetimeUTC, speed_ms, color = "caro_3")) +
  geom_line(data = caro_6, aes(DatetimeUTC, speed_ms, color = "caro_6")) +
  geom_line(data = caro_9, aes(DatetimeUTC, speed_ms, color = "caro_9")) +
  theme_minimal() +
   scale_color_manual(name = "Sampling Intervals",
                     values = c("caro" = "red", "caro_3" = "green", "caro_6" = "lightblue", "caro_9" = "violet"), 
                     labels = c("1 minute", "3 minutes", "6 minutes", "9 minutes")) +
  labs(title = "Comparing derived speed at different sampling intervals", x = "Time", y = "Speed (m/s)")
```

# Task 6 and 7: Add your movement data to your respitory and explore your morvement data
Now, import your data in the same way you imported the the wild boar data in task 1. Next, start exploring your data, similarly as you did in task 2. At a minimum:

1. Import your data as a data frame and convert it to an sf object, using the correct CRS information
2. Convert your data to CH1903+ LV95
3. Make a map of your data using ggplot2 or tmap.
```{r}
# Import the downloaded csv 
posmo <- read_delim("data/posmo_2023-01-01T00_00_00+01_00-2023-04-28T23_59_59+02_00.csv", ",") 

# to convert it to a spatial object, similiar to the .csv's 
# here I have to use the crs for the Coordinate System WGS84, as the lon_x and lat_y columns indicate, that this is the right crs. 
posmo <- st_as_sf(posmo, coords = c("lon_x", "lat_y"), crs = 4326, remove = FALSE) 

# Convert data to CH1903+ LV95
st_transform(posmo, crs = 2056)

# Make a map of your data using ggplot2 or tmap.
# 1. Version with tmap
tmap_mode("view")

tm_shape(posmo) +
  tm_bubbles(col = "transport_mode")

# 2. Version with ggplot
ggplot() +
  geom_sf(data = posmo, aes(col = transport_mode)) +
  theme_minimal()
```


